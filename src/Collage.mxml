<?xml version="1.0" encoding="utf-8"?> 
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:clg="Collage.Document.*"
	xmlns:degrafa="http://www.degrafa.com/2007"
	layout="absolute"
	minHeight="400"
	minWidth="500"
	height="700"
	width="1000"
	menu="{nativeMenu}"
	title="Collage"
	buttonAlignment="auto"
	cornerRadius="4"
	showStatusBar="true"
	borderThickness="1"
	borderColor="#999999"
	dropShadowEnabled="true"
	applicationComplete="Initialize()"
    paste="HandlePaste(event);"
	keyDown="HandleKeyDown(event);"
	nativeDragEnter="onDragIn(event)"
	nativeDragDrop="onDrop(event)"
	invoke="OnInvoke(event)"
	closing="WindowClosing(event)" >
	<mx:Style source="yflexskin.css"/>
	<mx:Style source="collageBasic.css"/>
	<mx:Script>
	<![CDATA[
		import mx.containers.dividedBoxClasses.BoxDivider;
		import com.adobe.serialization.json.JSON;
		import Collage.Document.*;
		import Collage.Clips.Picture.*;
		import mx.graphics.ImageSnapshot;
		import mx.graphics.codec.*;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		import mx.core.IFlexDisplayObject;
		import mx.events.*;
		import flash.events.*;
		import flash.desktop.Clipboard;
	    import flash.desktop.ClipboardFormats;
	    import flash.desktop.ClipboardTransferMode;
		import Collage.DataEngine.*;
		import Collage.Logger.*;
		import org.alivepdf.pdf.*;
		import org.alivepdf.pdf.PDF;	
		import org.alivepdf.display.*;
		import org.alivepdf.images.*;
		import org.alivepdf.layout.*;
		import org.alivepdf.saving.*;
		
		/* auto updater ui */
		import air.update.events.UpdateEvent;
		import air.update.ApplicationUpdaterUI;
		
		private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
		
		private function checkUpdate():void {
			appUpdater.updateURL = "http://version.endlesspaths.com/collage/latest.xml";
			appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
			/*appUpdater.addEventListener(ErrorEvent.ERROR, onError);*/
			appUpdater.isCheckForUpdateVisible = false;
			appUpdater.initialize();
		}
		
		private function OnInvoke(event:InvokeEvent):void {
			
		}

		private function onUpdate(event:UpdateEvent):void {
			//start the process of checking for a new update and to install
			appUpdater.checkNow();
		}

		private var _Document:Document;

		private function Initialize():void
		{
			Logger.events.addEventListener(Logger.NEW_LOG_EVENT, LoggerStatusBarUpdate);
			Logger.Log("Application Started", LogEntry.DEBUG   , this);
			//stage.addEventListener(KeyboardEvent.KEY_DOWN, HandleKeyDown);

			Session.events.addEventListener(Session.LOGIN_SUCCESS, HandleLoginSuccess);
			Session.events.addEventListener(Session.TOKEN_EXPIRED, HandleTokenExpired);
			Session.CheckToken();
			
			_EditDocumentView.InitializeForEdit(inspectorWindow, optionsBox);
			
			this.nativeWindow.x = (Capabilities.screenResolutionX - this.width)/2;
			this.nativeWindow.y = (Capabilities.screenResolutionY - this.height)/2;
			this.nativeWindow.visible = true;
			
			/* auto updater - called after everything else is initialized */
			checkUpdate();
		}
		
		public function LoggerStatusBarUpdate(event:Event):void {
			if (Logger.LastLog() != null && Logger.LastLog().level >= 0)//LogEntry.INFO)
				status = Logger.LastLog().text;
		}
		
		public function HandleLoginSuccess(event:Event):void {
			DataEngine.LoadAllDataSets();
		}
		
		public function HandleLoginFailure(event:Event):void {
			PopUpManager.createPopUp(this, Login, true);
		}
		
		public function HandleTokenExpired(event:Event):void {
			PopUpManager.createPopUp(this, Login, true);
		}

		private function StandardOSModifier(item:Object):Array{
			var modifiers:Array = new Array();
			if((Capabilities.os.indexOf("Windows") >= 0)){
				modifiers.push(Keyboard.CONTROL);
			} else if (Capabilities.os.indexOf("Mac OS") >= 0){
				modifiers.push(Keyboard.COMMAND);
			} 
			return modifiers;
		}
					
		private function Fullscreen():void
		{
			if (stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE)
				stage.displayState = StageDisplayState.NORMAL;
			else
				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
		}
		
		private function HandleKeyDown(event:KeyboardEvent):void
		{
//			if (event.keyCode == KeyCodes.DELETE || event.keyCode == KeyCodes.BACKSPACE)
//				_EditDocumentView.deleteSelected();
		}
		
		private function WindowClosing(event:Event):void
		{

		}
		
		public function HandlePaste(event:Event):void
		{
			if (Clipboard.generalClipboard.hasFormat(ClipboardFormats.BITMAP_FORMAT)) {
				_EditDocumentView.AddClipFromData(Clipboard.generalClipboard.getData(ClipboardFormats.BITMAP_FORMAT) as BitmapData);
			} else if (Clipboard.generalClipboard.hasFormat(ClipboardFormats.HTML_FORMAT)) {
				_EditDocumentView.AddClipFromData(Clipboard.generalClipboard.getData(ClipboardFormats.HTML_FORMAT) as String);
			} else if (Clipboard.generalClipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)) {
				_EditDocumentView.AddClipFromData(Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT) as String);
			}
		}
		
		public function SaveFile():void
		{
			var file:File = File.desktopDirectory.resolvePath("file.clg");
			file.addEventListener(Event.SELECT, SaveFileEvent);
			_EditDocumentView.ClearSelection();
			file.browseForSave("Save As");
		}
			
		protected function SaveFileEvent(event:Event):void
		{
			var jsonFile:String = JSON.encode(_EditDocumentView.model.SaveToObject());
			
			var newFile:File = event.target as File;
			var fs:FileStream = new FileStream();
			try{
				fs.open(newFile,FileMode.WRITE);
				jsonFile = jsonFile.replace(/\n/g, File.lineEnding);
				fs.writeUTFBytes(jsonFile); 
				fs.close();
			} catch(e:Error){
				Logger.Log(e.message, LogEntry.ERROR, this);
			}
		}
		
		public function OpenFile(file:File = null):void
		{
			if (file) {
				OpenFileObject(file);
				return;
			}
			file = File.desktopDirectory;
			file.addEventListener(Event.SELECT, OpenFileEvent);
			file.browseForOpen("Open");
		}
			
		protected function OpenFileEvent(event:Event):void
		{
			OpenFileObject(event.target as File);
		}
		
		public function OpenFileObject(file:File):void
		{
			if (!file)
				return;
			
			var stream:FileStream = new FileStream();
			try{
			    stream.open(file, FileMode.READ);
			    var fileData:Object = JSON.decode(stream.readUTFBytes(stream.bytesAvailable));
			    _EditDocumentView.model.LoadFromObject(fileData);
			} catch(e:Error){
				Alert.show(e.message);
			}
		}
		
		public function SaveImage():void
		{
			var file:File = File.desktopDirectory.resolvePath("snapshot.png");
			file.addEventListener(Event.SELECT, SaveImageEvent);
			_EditDocumentView.ClearSelection();
			file.browseForSave("Save As");
		}
			
		protected function SaveImageEvent(event:Event):void
		{
			var snapshot:ImageSnapshot = ImageSnapshot.captureImage(_EditDocumentView);
			
			var newFile:File = event.target as File;
			var fs:FileStream = new FileStream();
			try{
				fs.open(newFile,FileMode.WRITE);
				fs.writeBytes(snapshot.data, 0, snapshot.data.length); 
				fs.close();
			} catch(e:Error){
				trace(e.message);
			}
		}
		
		public function SavePDF():void
		{
			var file:File = File.desktopDirectory.resolvePath("report.pdf");
			file.addEventListener(Event.SELECT, SavePDFEvent);
			_EditDocumentView.ClearSelection();
			file.browseForSave("Save As");
		}
			
		protected function SavePDFEvent(event:Event):void
		{
			var snapshot:ImageSnapshot = ImageSnapshot.captureImage(_EditDocumentView, 0, new JPEGEncoder());
			var snapshotBitmap:BitmapData = ImageSnapshot.captureBitmapData(_EditDocumentView);

			var newPDF:PDF = new PDF(Orientation.LANDSCAPE, Unit.MM, Size.LETTER);
			newPDF.setDisplayMode(Display.FULL_WIDTH); 

			newPDF.addPage();
//			newPDF.addImageStream(snapshot.data, ColorSpace.DEVICE_RGB, new Resize ( Mode.FIT_TO_PAGE, Position.CENTERED ));
			newPDF.addImage(new Bitmap(snapshotBitmap), new Resize ( Mode.FIT_TO_PAGE, Position.CENTERED ));
/*
			newPDF.setFont(FontFamily.ARIAL , Style.NORMAL, 12);
			newPDF.addText("Claimant Name: " + this.firstName.text + " " + lastName.text,10,40);
			newPDF.addText("Date: " + this.date.text,10,50);
			newPDF.addTextNote(48,45,100,2,"Claim Filed on: " + this.date.text + " today's date: " + new Date());
			newPDF.addText("Policy #: " + this.policyNum.text,10,60);
			newPDF.addText("Contact #: " + this.contact.text,10,70);
			newPDF.addText(this.claimNum.text,10,80);
			newPDF.addText("Claim Description:",10,90);
			newPDF.setXY(10,95);
			newPDF.addMultiCell(200,5,desc.text);
*/
			
			var newFile:File = event.target as File;
			var fs:FileStream = new FileStream();
			try{
				fs.open(newFile,FileMode.WRITE);
				var pdfBytes:ByteArray = newPDF.save(Method.LOCAL);
				fs.writeBytes(pdfBytes); 
				fs.close();
			} catch(e:Error){
				trace(e.message);
			}
		}
		
		private function onDragIn(event:NativeDragEvent):void{
			NativeDragManager.acceptDragDrop(this);
		}

		private function onDrop(event:NativeDragEvent):void{
			var dropfiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
			for each (var file:File in dropfiles){
				var ext:String = file.extension.toLowerCase();
				
				if (ext == "png" || ext == "jpg" || ext == "jpeg" || ext == "gif") {
					var newClip:PictureClip = _EditDocumentView.AddClipByType("image") as PictureClip;
					newClip.url = file.url;
				} else if (ext == "clg") {
					OpenFile(file);
				} else if (ext == "csv" || ext == "tsv") {
					DataEngine.UploadCSV(file);
				}
				else {
					//Alert.show("Unmapped Extension");
				}
			}
		}

		private function menuShow(menuEvent:FlexNativeMenuEvent):void
		{
			if (!_EditDocumentView.IsObjectSelected()) {
//				collageMenuData..
			}
		}

		private function menuItemClicked(menuEvent:FlexNativeMenuEvent):void
		{
			var command:String = menuEvent.item.@command;
			switch(command){
				case "cut":
					NativeApplication.nativeApplication.cut();
					break;
				case "copy":
					NativeApplication.nativeApplication.copy();
					break;
				case "paste":
					HandlePaste(null);
					NativeApplication.nativeApplication.paste();
					break;
				case "delete":
					_EditDocumentView.deleteSelected();
					break;
				case "quit":
					NativeApplication.nativeApplication.exit();
					break;
				case "new":
					_EditDocumentView.NewDocument();
					break;
				case "about":
					break;
				case "open":
					OpenFile();
					break;
				case "save":
					SaveFile();
					break;
				case "saveImage":
					SaveImage();
					break;
				case "savePDF":
					SavePDF();
					break;
				case "print":
					break;
				case "undo":
					break;
				case "redo":
					break;
				case "moveForward":
					_EditDocumentView.MoveSelectedForward();
					break;
				case "moveBackward":
					_EditDocumentView.MoveSelectedBackward();
					break;
				case "moveToFront":
					_EditDocumentView.MoveSelectedToFront();
					break;
				case "moveToBack":
					_EditDocumentView.MoveSelectedToBack();
					break;
				case "insertImage":
					_EditDocumentView.AddClipByType('image', new Rectangle(150, 150, 300, 300));
					break;
				case "insertLabel":
					_EditDocumentView.AddClipByType('label', new Rectangle(150, 150, 300, 300));
					break;
				case "insertTextBox":
					_EditDocumentView.AddClipByType('textbox', new Rectangle(150, 150, 300, 300));
					break;
				case "insertDataLabel":
					_EditDocumentView.AddClipByType('datalabel', new Rectangle(150, 150, 300, 300));
					break;
				case "insertTable":
					_EditDocumentView.AddClipByType('table', new Rectangle(150, 150, 300, 300));
					break;
				case "insertLineChart":
					_EditDocumentView.AddClipByType('linechart', new Rectangle(150, 150, 300, 300));
					break;
				case "insertScatterChart":
					_EditDocumentView.AddClipByType('scatterchart', new Rectangle(150, 150, 300, 300));
					break;
				case "insertBarChart":
					_EditDocumentView.AddClipByType('barchart', new Rectangle(150, 150, 300, 300));
					break;
				case "insertPieChart":
					_EditDocumentView.AddClipByType('piechart', new Rectangle(150, 150, 300, 300));
					break;
				case "insertGuage":
					_EditDocumentView.AddClipByType('guage', new Rectangle(150, 150, 300, 300));
					break;
				case "insertWebEmbed":
					_EditDocumentView.AddClipByType('webembed', new Rectangle(150, 150, 300, 300));
					break;
				case "insertGoogleMaps":
					_EditDocumentView.AddClipByType('googlemaps', new Rectangle(150, 150, 300, 300));
					break;
				case "fullscreen":
					Fullscreen();
					menuEvent.item.@toggled = !menuEvent.item.@toggled;
					break;
				case "refreshDatasets":
					DataEngine.LoadAllDataSets();
					break;
				case "logout":
					Session.Logout();
					break;
				case "debugger":
					var newLoggerWindow:LoggerWindow = new LoggerWindow();
					newLoggerWindow.open();
					break;
				case "hideInspector":
					inspectorWindow.visible = !inspectorWindow.visible;

					if (!inspectorWindow.visible) {
						menuEvent.item.@label = "Show Inspector";
						inspectorWindow.width = 0;
						editCanvas.setStyle("width","100%");
					} else {
						menuEvent.item.@label = "Hide Inspector";
						inspectorWindow.width = 250;
						editCanvas.setStyle("width","100%");
					}
					
					break;
				default:
					Alert.show("Unrecognized Menu Command: " + command + "  " + menuEvent.item.@label);
			}
		}		
	]]>
	</mx:Script>
	<mx:FlexNativeMenu id="nativeMenu" dataProvider="{collageMenuData}" 
		labelField="@label" 
		showRoot="false"
		itemClick="{menuItemClicked(event)}"
		menuShow="{menuShow(event)}"
		keyEquivalentField="@key" keyEquivalentModifiersFunction="StandardOSModifier"
		mnemonicIndexField="@mnemonicIndex"	
		/>
    <mx:XML format="e4x" id="collageMenuData">
        <root>
            <menuitem label="Collage">
                <menuitem label="About" command="about" enabled="false"/>
				<menuitem type="separator"/>
				<menuitem label="Logout" command="logout" />
                <menuitem label="Quit" command="quit" key="q"/>
            </menuitem>
            <menuitem label="File">
                <menuitem label="New" command="new" key="n"/>
                <menuitem label="Open..." command="open" key="o"/>
                <menuitem type="separator"/>     
                <menuitem label="Save..." command="save" key="s"/>
                <menuitem label="Save Image..." command="saveImage"/>
                <menuitem label="Save PDF..." command="savePDF"/>
                <menuitem type="separator"/>     
                <menuitem label="Print..." key="p" command="print" enabled="false"/>
            </menuitem>
            <menuitem label="Edit">
                <menuitem label="Undo" key="z" command="undo" enabled="false"/>
                <menuitem label="Redo" command="redo" enabled="false"/>
                <menuitem type="separator"/>
				<menuitem label="Cut" enabled="false" command="cut" key="x"/>
				<menuitem label="Copy" enabled="false" command="copy" key="c"/>
				<menuitem label="Paste" command="paste" key="v"/>
				<menuitem label="Delete" command="delete" />
                <menuitem type="separator"/>
				<menuitem label="Refresh datasets" command="refreshDatasets" key="r"/>
                <menuitem type="separator"/>
				<menuitem label="Move Selected Forward" command="moveForward"/>
				<menuitem label="Move Selected Backward" command="moveBackward"/>
				<menuitem label="Move Selected To Front" command="moveToFront"/>
				<menuitem label="Move Selected To Back" command="moveToBack"/>
            </menuitem>
            <menuitem label="Insert">
                <menuitem label="Image" command="insertImage"/>
                <menuitem label="Label" command="insertLabel"/>
                <menuitem label="Text Box" command="insertTextBox"/>
                <menuitem type="separator" />     
                <menuitem label="Data Label" command="insertDataLabel"/>
                <menuitem label="Table" command="insertTable"/>
                <menuitem label="Line" command="insertLineChart"/>
                <menuitem label="Scatter Chart" command="insertScatterChart"/>
                <menuitem label="Bar Chart" command="insertBarChart"/>
                <menuitem label="Pie Chart" command="insertPieChart"/>
                <menuitem label="Guage" command="insertGuage"/>
                <menuitem type="separator" />     
                <menuitem label="Web Embed" command="insertWebEmbed"/>
                <menuitem label="Google Maps" command="insertGoogleMaps"/>
            </menuitem>
            <menuitem label="View">
                <menuitem label="Fullscreen" type="check" command="fullscreen" toggled="false" key="f"/>
                <menuitem label="Hide Inspector" command="hideInspector" key="i"/>
                <menuitem type="separator" />
				<menuitem label="Debug Log Window" command="debugger" />
            </menuitem>
        </root>
    </mx:XML>
	<mx:VBox height="100%" left="0" width="32" backgroundColor="#D6D6D6" backgroundAlpha="1" horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4">
		<mx:Image id="fullscreenBtn" source="@Embed('../assets/themes/dark/fullscreen.png')" width="24" height="24" click="Fullscreen();" />
		<mx:HRule width="24" />
		<mx:Image id="addImageBtn" source="@Embed('../assets/themes/dark/image.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('image', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addLabelBtn" source="@Embed('../assets/themes/dark/label.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('label', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addTextBoxBtn" source="@Embed('../assets/themes/dark/text-box.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('textbox', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addLineChartBtn" source="@Embed('../assets/themes/dark/line-chart.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('linechart', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addBarChartBtn" source="@Embed('../assets/themes/dark/bar-chart.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('barchart', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addPieChartBtn" source="@Embed('../assets/themes/dark/pie-chart.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('piechart', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addGuageBtn" source="@Embed('../assets/themes/dark/guage.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('guage', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addTableBtn" source="@Embed('../assets/themes/dark/datagrid.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('table', new Rectangle(150, 150, 300, 300));" />
		<mx:Image id="addDataLabelBtn" source="@Embed('../assets/themes/dark/datalabel.png')" width="24" height="24" click="_EditDocumentView.AddClipByType('datalabel', new Rectangle(150, 150, 300, 300));" />
	</mx:VBox>
    <mx:HBox top="0" left="32" right="0" bottom="0" dropShadowEnabled="false" horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalGap="0" >
        <mx:Canvas id="editCanvas" label="Canvas 1" width="100%" height="100%" color="0x323232" backgroundColor="#ACACAC" backgroundAlpha="1" click="_EditDocumentView.BackgroundClick(event);">
			<mx:Box top="0" left="0" right="0" bottom="0" paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20"  horizontalAlign="center" verticalAlign="middle" backgroundAlpha="0" backgroundColor="0xffffff">
				<clg:EditDocumentView id="_EditDocumentView" 
					width="800" height="600" 
					dropShadowEnabled="true" 
					click="_EditDocumentView.BackgroundClick(event);" 
					backgroundColor="#FFFFFF" backgroundAlpha="1" borderThickness="0"
					horizontalScrollPolicy="off"
					verticalScrollPolicy="off" >
					<mx:HBox id="optionsBox" visible="false" paddingBottom="6" paddingTop="6">
						<mx:Image id="lockButton" source="@Embed('../assets/themes/dark/lock.png')" click="_EditDocumentView.lockSelected()" />
						<mx:Image id="deleteButton" source="@Embed('../assets/themes/dark/delete.png')" click="_EditDocumentView.deleteSelected()" />
					</mx:HBox>			
				</clg:EditDocumentView>
				<degrafa:Surface>
					<degrafa:strokes>
						<degrafa:SolidStroke id="gridStroke" color="#aaa" weight="1" alpha=".2"/>
					</degrafa:strokes>
					<degrafa:GeometryGroup>
						<degrafa:VerticalLineRepeater count="10" stroke="{gridStroke}"
														x="0" y="0" y1="600"
														offsetX="0" offsetY="0"
														moveOffsetX="{0}" moveOffsetY="0"/>
						<degrafa:HorizontalLineRepeater	count="10" stroke="{gridStroke}"
														x="0" y="0" x1="800"
														offsetX="0" offsetY="0"
														moveOffsetX="0" moveOffsetY="0"/>

					</degrafa:GeometryGroup>
				</degrafa:Surface>
			</mx:Box>
        </mx:Canvas>
        <mx:Box id="inspectorWindow" width="250" height="100%" backgroundColor="#ACACAC" backgroundAlpha="1" horizontalScrollPolicy="off" paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4"  >
        </mx:Box>
    </mx:HBox>
</mx:WindowedApplication>