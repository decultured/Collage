<?xml version="1.0" encoding="utf-8"?>
<clg:ClipEditor xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:clg="Collage.Clip.*"
	xmlns:flexlib="flexlib.containers.*"
	backgroundColor="0x000000"
	backgroundAlpha="0"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationComplete="Initialize()" 
	width="100%" >
	<mx:Style>
	    .linkButtonWindowShade {
	      	headerClass:ClassReference('mx.controls.LinkButton');
	      	header-style-name: linkButtonStyle;
	     	drop-shadow-enabled:false;
	      	corner-radius:3;
	      	border-style:solid;
	    	background-color:#ddd;
			padding-left:5;
			padding-right:5;
			padding-top:5;
			padding-bottom:5;
	    }         
	    
	    .linkButtonStyle {
	    	corner-radius:3;
	    	fill-alphas:1,1;
	    	padding-left:10;
	    }
	</mx:Style>
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import Collage.DataEngine.*;
		import mx.collections.ArrayCollection;

		[Bindable] public var modifierSelections:ArrayCollection = new ArrayCollection(
		    [ {label:"Min", data:"min"},
		      {label:"Max", data:"max"},
		      {label:"Average", data:"avg"},
		      {label:"Sum", data:"sum"},
		      {label:"Count", data:"count"},
		      {label:"Mode", data:"mode"}
			]);
	
		[Bindable] public var dataSetSelections:Array = new Array();
		[Bindable] public var labelColumnSelections:Array = new Array();
		[Bindable] public var dataColumnSelections:Array = new Array();
	
	
		private function Initialize():void
		{
			DataEngineConnect();
			if (_Model) {
				var pieChartModel:PieChartClip = _Model as PieChartClip
				backgroundColorPicker.selectedColor = pieChartModel.backgroundColor;
				transparencySlider.value = pieChartModel.backgroundAlpha;
			}
		}
		
		private function SettingsChanged():void
		{
			if (_Model) {
				var pieChartModel:PieChartClip = _Model as PieChartClip;
				pieChartModel.backgroundColor = backgroundColorPicker.selectedColor;
				pieChartModel.backgroundAlpha = transparencySlider.value;
			}
		}
		private function DataEngineConnect():void
		{
			DataEngine.events.addEventListener(DataEngine.COMPLETE, DatasLoaded);
			DatasLoaded(null);
		}
		
		private function DatasLoaded(event:Event):void
		{
			/*DataEngine.events.removeEventListener(DataEngine.COMPLETE, DatasLoaded);*/
			dataSetSelections = DataEngine.GetDataSetsComboBox(new Array("numeric", "datetime"), 1, 3);
		}

		private function ColumnSelectorChanged():void
		{
			if (dataSetSelector.selectedItem)
				var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (!dataset || !_Model)
				return;
			
			var pieChartModel:PieChartClip = _Model as PieChartClip;
			if (labelColumnSelector.selectedItem)
				var labelColumn:DataSetColumn = dataset.GetColumnByID(labelColumnSelector.selectedItem.data);
			if (dataColumnSelector.selectedItem)
				var dataColumn:DataSetColumn = dataset.GetColumnByID(dataColumnSelector.selectedItem.data);

			if (labelColumn) {
				pieChartModel.labelColumn = labelColumn.label;
			}

			if (dataColumn) {
				pieChartModel.dataColumn = dataColumn.label;
			}
			
			pieChartModel.RunQuery();
//			UpdateInspector();
		}
		
		private function SubmitDataRequest():void
		{
			var pieChartModel:PieChartClip = _Model as PieChartClip;
			pieChartModel.rowsRequested = parseInt(rowsRequested.text);
			if (isNaN(pieChartModel.rowsRequested) || pieChartModel.rowsRequested < 1) pieChartModel.rowsRequested = 1;
			if (pieChartModel.rowsRequested > 100) pieChartModel.rowsRequested = 100;
			rowsRequested.text = pieChartModel.rowsRequested.toString();
			pieChartModel.RunQuery();
		}
		
		private function DataSetSelectorChanged():void
		{
			if (!_Model)
				return;
				
			var pieChartModel:PieChartClip = _Model as PieChartClip;

			pieChartModel.dataColumn = null;
			pieChartModel.labelColumn = null;
			pieChartModel.dataModifier = null;
			pieChartModel.ResetData();

			var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (dataset) {
				pieChartModel.dataSetID = dataset.id;
				dataColumnSelections = dataset.GetColumnsComboBox(new Array("numeric", "datetime"));
				labelColumnSelections = dataset.GetColumnsComboBox();
				dataColumnSelector.enabled = true;
				labelColumnSelector.enabled = true;
				modifierSelector.enabled = true;
			} else {
				dataColumnSelector.enabled = false;
				labelColumnSelector.enabled = false;
				modifierSelector.enabled = false;
				dataColumnSelector.selectedIndex = -1;
				labelColumnSelector.selectedIndex = -1;
				modifierSelector.selectedIndex = -1;
				pieChartModel.ResetData();
			}
			
//			UpdateInspector();
		}	

		private function ModifierSelectorChanged():void
		{
			if (!_Model)
				return;
			
			var pieChartModel:PieChartClip = _Model as PieChartClip;
			pieChartModel.dataModifier = modifierSelector.selectedItem.data;
			pieChartModel.RunQuery();
		}
	]]>
    </mx:Script>
	<flexlib:WindowShade label="Data Connection" styleName="linkButtonWindowShade" width="100%">
		<mx:Label text="Data Set:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="dataSetSelector" dataProvider="{dataSetSelections}" width="230" change="DataSetSelectorChanged()" prompt="Please select a dataset..."/>
		<mx:Label text="Label (Group) Column:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="labelColumnSelector" dataProvider="{dataColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()" prompt="Please select a column..."/>
		<mx:Label text="Data Column:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="dataColumnSelector" dataProvider="{dataColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()" prompt="Please select a column..."/>
		<mx:Label text="Modifier:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="modifierSelector" dataProvider="{modifierSelections}" enabled="false" width="230" change="ModifierSelectorChanged()" prompt="Please select a modifier..."/>
		<mx:Label text="Rows Requested:" color="#000000" fontWeight="bold" />
		<mx:TextInput id="rowsRequested" text="10" color="0x323232" width="100%" />
		<mx:Button id="submitDataButton" color="0x323232" label="Apply" click="SubmitDataRequest()"  />
	</flexlib:WindowShade>
	<flexlib:WindowShade label="Pie Chart Settings" styleName="linkButtonWindowShade" width="100%">
		<mx:HRule width="100%" />
		<mx:HBox width="100%" >
			<mx:Label text="Background Color:" color="#000000" fontWeight="bold" /><mx:ColorPicker id="backgroundColorPicker" showTextField="true" selectedColor="0xFFFFFF" change="SettingsChanged()" />
		</mx:HBox>
		<mx:Label text="Background Transparency:" color="#000000" fontWeight="bold" />
		<mx:HSlider id="transparencySlider" minimum="0" maximum="1" value="1"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
</clg:ClipEditor>