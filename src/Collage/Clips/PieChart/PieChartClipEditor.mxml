<?xml version="1.0" encoding="utf-8"?>
<clg:ClipEditor xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:clg="Collage.Clip.*"
	xmlns:flexlib="flexlib.containers.*"
	creationComplete="Initialize()" >
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import Collage.DataEngine.*;
		import mx.collections.ArrayCollection;

		[Bindable] public var modifierSelections:ArrayCollection = new ArrayCollection(
		    [ {label:"Min", data:"min"},
		      {label:"Max", data:"max"},
		      {label:"Average", data:"avg"},
		      {label:"Sum", data:"sum"},
		      {label:"Count", data:"count"},
		      {label:"Mode", data:"mode"}
			]);
	
		[Bindable] public var labelPositionSelections:ArrayCollection = new ArrayCollection(
		    [ {label:"Callout", data:"callout"},
		      {label:"Inside", data:"inside"},
		      {label:"Inside With Callout", data:"insideWithCallout"},
		      {label:"Outside", data:"outside"},
		      {label:"None", data:"none"}
			]);

		[Bindable] public var dataSetSelections:Array = new Array();
		[Bindable] public var labelColumnSelections:Array = new Array();
		[Bindable] public var dataColumnSelections:Array = new Array();
	
	
		private function Initialize():void
		{
			DataEngineConnect();
			if (_Model) {
				var pieChartModel:PieChartClip = _Model as PieChartClip
				backgroundColorPicker.selectedColor = pieChartModel.backgroundColor;
				transparencySlider.value = pieChartModel.backgroundAlpha;
			}
		}
		
		private function DataEngineConnect():void
		{
			DataEngine.events.addEventListener(DataEngine.COMPLETE, DatasLoaded);
			DatasLoaded(null);
		}
		
		private function DatasLoaded(event:Event):void
		{
			/*DataEngine.events.removeEventListener(DataEngine.COMPLETE, DatasLoaded);*/
			dataSetSelections = DataEngine.GetDataSetsComboBox(new Array("numeric", "datetime"), 1, 3);
			var pieChartModel:PieChartClip = _Model as PieChartClip;
			for (var i:int = 0; i < dataSetSelections.length; i++)
				if (dataSetSelections[i]["data"] == pieChartModel.dataSetID)
					dataSetSelector.selectedIndex = i;
			if (dataSetSelector.selectedItem)
				DataSetSelectorChanged(false);
		}

		private function ColumnSelectorChanged():void
		{
			var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (!dataset || !_Model)
				return;
			
			var pieChartModel:PieChartClip = _Model as PieChartClip;

			var labelColumn:DataSetColumn = dataset.GetColumnByID(labelColumnSelector.selectedItem.data);
			var dataColumn:DataSetColumn = dataset.GetColumnByID(dataColumnSelector.selectedItem.data);

			if (labelColumn)
				pieChartModel.labelColumn = labelColumn.label;
			if (dataColumn)
				pieChartModel.dataColumn = dataColumn.label;
			
			pieChartModel.RunQuery();
		}
		
		private function SubmitDataRequest():void
		{
			var pieChartModel:PieChartClip = _Model as PieChartClip;
			pieChartModel.rowsRequested = parseInt(rowsRequested.text);
			if (isNaN(pieChartModel.rowsRequested) || pieChartModel.rowsRequested < 1) pieChartModel.rowsRequested = 1;
			if (pieChartModel.rowsRequested > 100) pieChartModel.rowsRequested = 100;
			rowsRequested.text = pieChartModel.rowsRequested.toString();
			pieChartModel.RunQuery();
		}
		
		private function DataSetSelectorChanged(clearSelections:Boolean = true):void
		{
			if (!_Model)
				return;
				
			var pieChartModel:PieChartClip = _Model as PieChartClip;

			if (clearSelections) {
				pieChartModel.dataColumn = null;
				pieChartModel.labelColumn = null;
				pieChartModel.dataModifier = null;
				pieChartModel.ResetData();
			}

			var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (dataset) {
				pieChartModel.dataSetID = dataset.id;
				dataColumnSelections = dataset.GetColumnsComboBox(new Array("numeric", "datetime"));
				labelColumnSelections = dataset.GetColumnsComboBox();
				for (var i:int = 0; i < dataColumnSelections.length; i++) {
					if (dataColumnSelections[i]["label"] == pieChartModel.dataColumn)
						dataColumnSelector.selectedIndex = i;
				}
				for (i = 0; i < labelColumnSelections.length; i++) {
					if (labelColumnSelections[i]["label"] == pieChartModel.labelColumn)
						labelColumnSelector.selectedIndex = i;
				}
				for (i = 0; i < modifierSelections.length; i++) {
					if (modifierSelections[i]["data"] == pieChartModel.dataModifier)
						modifierSelector.selectedIndex = i;
				}
				dataColumnSelector.enabled = true;
				labelColumnSelector.enabled = true;
				modifierSelector.enabled = true;
			} else {
				dataColumnSelector.enabled = false;
				labelColumnSelector.enabled = false;
				modifierSelector.enabled = false;
				dataColumnSelector.selectedIndex = -1;
				labelColumnSelector.selectedIndex = -1;
				modifierSelector.selectedIndex = -1;
//				pieChartModel.ResetData();
			}
		}	

		private function ModifierSelectorChanged():void
		{
			if (!_Model)
				return;
			
			var pieChartModel:PieChartClip = _Model as PieChartClip;
			pieChartModel.dataModifier = modifierSelector.selectedItem.data;
			pieChartModel.RunQuery();
		}
		
		private function SettingsChanged():void
		{
			if (_Model) {
				var pieChartModel:PieChartClip = _Model as PieChartClip;
				pieChartModel.backgroundColor = backgroundColorPicker.selectedColor;
				pieChartModel.backgroundAlpha = transparencySlider.value;
				pieChartModel.innerRadius = innerRadius.value;
				pieChartModel.explodeRadius = explodeRadius.value;
				
				pieChartModel.borderColor = borderColor.selectedColor;
				pieChartModel.borderAlpha = borderAlpha.value;
				pieChartModel.borderWeight = borderWeight.value;

				pieChartModel.radialColor = radialColor.selectedColor;
				pieChartModel.radialAlpha = radialAlpha.value;
				pieChartModel.radialWeight = radialWeight.value;

				pieChartModel.calloutColor = calloutColor.selectedColor;
				pieChartModel.calloutAlpha = calloutAlpha.value;
				pieChartModel.calloutWeight = calloutWeight.value;

				pieChartModel.labelPosition = labelPosition.selectedItem.data;
				pieChartModel.labelColor = labelColor.selectedColor;
				pieChartModel.labelSize = labelSize.value;
			}
		}
		
	]]>
    </mx:Script>
	<flexlib:WindowShade label="Data Connection" styleName="linkButtonWindowShade" width="100%">
		<mx:Label text="Data Set:"/>
		<mx:ComboBox id="dataSetSelector" dataProvider="{dataSetSelections}" width="230" change="DataSetSelectorChanged()"/>
		<mx:Label text="Label (Group) Column:"/>
		<mx:ComboBox id="labelColumnSelector" dataProvider="{labelColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()"/>
		<mx:Label text="Data Column:"/>
		<mx:ComboBox id="dataColumnSelector" dataProvider="{dataColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()"/>
		<mx:Label text="Modifier:"/>
		<mx:ComboBox id="modifierSelector" dataProvider="{modifierSelections}" enabled="false" width="230" change="ModifierSelectorChanged()"/>
		<mx:Label text="Rows Requested:"/>
		<mx:TextInput id="rowsRequested" text="10" color="0x323232" width="100%" />
		<mx:Button id="submitDataButton" color="0x323232" label="Apply" click="SubmitDataRequest()"  />
	</flexlib:WindowShade>
	<flexlib:WindowShade label="Basic Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:Label text="Inside Radius:" />
		<mx:HSlider id="innerRadius" minimum="0" maximum="1" value="{model.innerRadius}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="Explode Radius:" />
		<mx:HSlider id="explodeRadius" minimum="0" maximum="1" value="{model.explodeRadius}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:HRule width="100%" />
		<mx:HBox width="100%" >
			<mx:Label text="Background Color:"/>
			<mx:ColorPicker id="backgroundColorPicker" showTextField="true" selectedColor="{model.backgroundColor}" change="SettingsChanged()" />
		</mx:HBox>
		<mx:Label text="Background Transparency:"/>
		<mx:HSlider id="transparencySlider" minimum="0" maximum="1" value="{model.backgroundAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:HBox width="100%" >
			<mx:Label text="Radial Colors:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="radialColor" showTextField="true" selectedColor="{model.radialColor}" change="SettingsChanged()" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="Radial Transparency:" />
		<mx:HSlider id="radialAlpha" minimum="0" maximum="1" value="{model.radialAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="Radial Weight:" />
		<mx:HSlider id="radialWeight" minimum="1" maximum="15" snapInterval="1" value="{model.radialWeight}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:HBox width="100%" >
			<mx:Label text="Border Color:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="borderColor" showTextField="true" selectedColor="{model.borderColor}" change="SettingsChanged()" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="Border Transparency:" />
		<mx:HSlider id="borderAlpha" minimum="0" maximum="1" value="{model.borderAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="Border Weight:" />
		<mx:HSlider id="borderWeight" minimum="1" maximum="15" snapInterval="1" value="{model.borderWeight}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
	<flexlib:WindowShade label="Label Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:Label text="Label Position:"/>
		<mx:ComboBox id="labelPosition" dataProvider="{labelPositionSelections}" width="230" change="SettingsChanged()" />
		<mx:Label text="Label Size:" />
		<mx:HSlider id="labelSize" minimum="9" maximum="72" snapInterval="1" value="{model.labelSize}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:HBox width="100%" >
			<mx:Label text="Label Color:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="labelColor" showTextField="true" selectedColor="{model.labelColor}" change="SettingsChanged()" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:HBox width="100%" >
			<mx:Label text="Callout Color:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="calloutColor" showTextField="true" selectedColor="{model.calloutColor}" change="SettingsChanged()" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="Callout Transparency:" />
		<mx:HSlider id="calloutAlpha" minimum="0" maximum="1" value="{model.calloutAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="Callout Weight:" />
		<mx:HSlider id="calloutWeight" minimum="1" maximum="15" snapInterval="1" value="{model.calloutWeight}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
</clg:ClipEditor>