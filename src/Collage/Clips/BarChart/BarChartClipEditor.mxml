<?xml version="1.0" encoding="utf-8"?>
<clg:ClipEditor xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:clg="Collage.Clip.*"
	xmlns:flexlib="flexlib.containers.*"
	creationComplete="Initialize()" >
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import Collage.DataEngine.*;
		import mx.collections.ArrayCollection;

		[Bindable] public var modifierSelections:ArrayCollection = new ArrayCollection(
		    [ {label:"Min", data:"min"},
		      {label:"Max", data:"max"},
		      {label:"Average", data:"avg"},
		      {label:"Sum", data:"sum"},
		      {label:"Count", data:"count"},
		      {label:"Mode", data:"mode"}
			]);
		[Bindable] public var gridDirectionSelections:ArrayCollection = new ArrayCollection(
		    [ {label:"Horizontal", data:"horizontal"},
		      {label:"Vertical", data:"vertical"},
			  {label:"Both", data:"both"}
			]);

		[Bindable] public var dataSetSelections:Array = new Array();
		[Bindable] public var labelColumnSelections:Array = new Array();
		[Bindable] public var dataColumnSelections:Array = new Array();

		private function Initialize():void
		{
			DataEngineConnect();
		}

		private function DataEngineConnect():void
		{
			DataEngine.events.addEventListener(DataEngine.COMPLETE, DatasLoaded);
			DatasLoaded(null);
		}

		private function DatasLoaded(event:Event):void
		{
			/*DataEngine.events.removeEventListener(DataEngine.COMPLETE, DatasLoaded);*/
			dataSetSelections = DataEngine.GetDataSetsComboBox(new Array("numeric", "datetime"), 1, 3);
		}

		private function ColumnSelectorChanged():void
		{
			if (dataSetSelector.selectedItem)
				var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (!dataset || !_Model)
				return;

			var barChartModel:BarChartClip = _Model as BarChartClip;
			if (labelColumnSelector.selectedItem)
				var labelColumn:DataSetColumn = dataset.GetColumnByID(labelColumnSelector.selectedItem.data);
			if (dataColumnSelector.selectedItem)
				var dataColumn:DataSetColumn = dataset.GetColumnByID(dataColumnSelector.selectedItem.data);

			if (labelColumn) {
				barChartModel.labelColumn = labelColumn.label;
			}

			if (dataColumn) {
				barChartModel.dataColumn = dataColumn.label;
			}

			barChartModel.RunQuery();
//			UpdateInspector();
		}

		private function SubmitDataRequest():void
		{
			var barChartModel:BarChartClip = _Model as BarChartClip;
			barChartModel.rowsRequested = parseInt(rowsRequested.text);
			if (isNaN(barChartModel.rowsRequested) || barChartModel.rowsRequested < 1) barChartModel.rowsRequested = 1;
			if (barChartModel.rowsRequested > 100) barChartModel.rowsRequested = 100;
			rowsRequested.text = barChartModel.rowsRequested.toString();
			barChartModel.RunQuery();
		}

		private function DataSetSelectorChanged():void
		{
			if (!_Model)
				return;

			var barChartModel:BarChartClip = _Model as BarChartClip;

			barChartModel.dataColumn = null;
			barChartModel.labelColumn = null;
			barChartModel.dataModifier = null;
			barChartModel.ResetData();

			var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (dataset) {
				barChartModel.dataSetID = dataset.id;
				dataColumnSelections = dataset.GetColumnsComboBox(new Array("numeric", "datetime"));
				labelColumnSelections = dataset.GetColumnsComboBox(new Array("numeric", "datetime"));
				dataColumnSelector.enabled = true;
				labelColumnSelector.enabled = true;
				modifierSelector.enabled = true;
			} else {
				dataColumnSelector.enabled = false;
				labelColumnSelector.enabled = false;
				modifierSelector.enabled = false;
				dataColumnSelector.selectedIndex = -1;
				labelColumnSelector.selectedIndex = -1;
				modifierSelector.selectedIndex = -1;
				barChartModel.ResetData();
			}

//			UpdateInspector();
		}	

		private function ModifierSelectorChanged():void
		{
			if (!_Model)
				return;

			var barChartModel:BarChartClip = _Model as BarChartClip;
			barChartModel.dataModifier = modifierSelector.selectedItem.data;
			barChartModel.RunQuery();
		}

		private function SettingsChanged():void
		{
			if (_Model) {
				var barChartModel:BarChartClip = _Model as BarChartClip;
				barChartModel.backgroundColor = backgroundColorPicker.selectedColor;
				barChartModel.backgroundAlpha = transparencySlider.value;

				barChartModel.barColor = barColor.selectedColor;
				barChartModel.barAlpha = barAlpha.value;

				// Grid Options
				barChartModel.gridVisible = gridVisible.selected;
				barChartModel.gridDirection = gridDirection.selectedItem.data;
				barChartModel.gridColor = gridColor.selectedColor;
				barChartModel.gridAlpha = gridAlpha.value;
				barChartModel.gridWeight = gridWeight.value;

				// Grid Origins
				barChartModel.gridHOriginVisible = gridHOriginVisible.selected;
				barChartModel.gridHOriginColor = gridHOriginColor.selectedColor;
				barChartModel.gridHOriginAlpha = gridHOriginAlpha.value;
				barChartModel.gridHOriginWeight = gridHOriginWeight.value;
				barChartModel.gridVOriginVisible = gridVOriginVisible.selected;
				barChartModel.gridVOriginColor = gridVOriginColor.selectedColor;
				barChartModel.gridVOriginAlpha = gridVOriginAlpha.value;
				barChartModel.gridVOriginWeight = gridVOriginWeight.value;
				
				// Vertical Axis 
				barChartModel.vAxisVisible = vAxisVisible.selected;
				barChartModel.vAxisColor = vAxisColor.selectedColor;
				barChartModel.vAxisAlpha = vAxisAlpha.value;
				barChartModel.vAxisWeight = vAxisWeight.value;
				barChartModel.vAxisLabelSize = vAxisLabelSize.value;
				barChartModel.vAxisLabelColor = vAxisLabelColor.selectedColor;
		        barChartModel.vAxisLabelGap = vAxisLabelGap.value;

				// Horizontal Axis
				barChartModel.hAxisVisible = hAxisVisible.selected;
				barChartModel.hAxisColor = hAxisColor.selectedColor;
				barChartModel.hAxisAlpha = hAxisAlpha.value;
				barChartModel.hAxisWeight = hAxisWeight.value;
				barChartModel.hAxisLabelSize = hAxisLabelSize.value;
				barChartModel.hAxisLabelColor = hAxisLabelColor.selectedColor;
		        barChartModel.hAxisLabelGap = hAxisLabelGap.value;
			}
		}		
	]]>
    </mx:Script>
	<flexlib:WindowShade label="Data Connection" styleName="linkButtonWindowShade" width="100%">
		<mx:Label text="Data Set:"/>
		<mx:ComboBox id="dataSetSelector" dataProvider="{dataSetSelections}" width="230" change="DataSetSelectorChanged()" prompt="Please select a dataset..."/>
		<mx:Label text="Label (Group) Column:"/>
		<mx:ComboBox id="labelColumnSelector" dataProvider="{labelColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()" prompt="Please select a column..."/>
		<mx:Label text="Data Column:"/>
		<mx:ComboBox id="dataColumnSelector" dataProvider="{dataColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()" prompt="Please select a column..."/>
		<mx:Label text="Modifier:"/>
		<mx:ComboBox id="modifierSelector" dataProvider="{modifierSelections}" enabled="false" width="230" change="ModifierSelectorChanged()" prompt="Please select a modifier..."/>
		<mx:Label text="Rows Requested:"/>
		<mx:TextInput id="rowsRequested" color="0x323232" width="100%" text="{model.rowsRequested}"/>
		<mx:Button id="submitDataButton" color="0x323232" label="Apply" click="SubmitDataRequest()" />
	</flexlib:WindowShade>
	<flexlib:WindowShade label="General Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:HRule width="100%" />
		<mx:HBox width="100%" >
			<mx:Label text="Background Color:"/>
			<mx:ColorPicker id="backgroundColorPicker" showTextField="true" selectedColor="{model.backgroundColor}" change="SettingsChanged()" />
		</mx:HBox>
		<mx:Label text="Background Transparency:"/>
		<mx:HSlider id="transparencySlider" minimum="0" maximum="1" value="{model.backgroundAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
	<flexlib:WindowShade opened="false" label="Bar Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:HBox width="100%" >
			<mx:Label text="Bar Color:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="barColor" showTextField="true" selectedColor="{model.barColor}" change="SettingsChanged()" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="Bar Transparency:" />
		<mx:HSlider id="barAlpha" minimum="0" maximum="1" value="{model.barAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
	<flexlib:WindowShade opened="false" label="Grid Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:CheckBox id="gridVisible" label="Grid Visible" click="SettingsChanged()" selected="{model.gridVisible}" />
		<mx:Label text="Grid Style:"/>
		<mx:ComboBox id="gridDirection" dataProvider="{gridDirectionSelections}" width="230" change="SettingsChanged()" />
		<mx:HBox width="100%" >
			<mx:Label text="Grid Color:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="gridColor" showTextField="true" selectedColor="{model.gridColor}" change="SettingsChanged()" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="Grid Transparency:" />
		<mx:HSlider id="gridAlpha" minimum="0" maximum="1" value="{model.gridAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="Grid Weight:" />
		<mx:HSlider id="gridWeight" minimum="0" maximum="15" snapInterval="1" value="{model.gridWeight}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<!-- Horizontal Origin -->
		<mx:CheckBox id="gridHOriginVisible" label="Horizontal Origin" click="SettingsChanged()" selected="{model.gridHOriginVisible}" />
		<mx:HBox width="100%" >
			<mx:Label text="H Origin Color:" enabled="{model.gridHOriginVisible}" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="gridHOriginColor" showTextField="true" selectedColor="{model.gridHOriginColor}" change="SettingsChanged()" enabled="{model.gridHOriginVisible}" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="H Origin Transparency:" enabled="{model.gridHOriginVisible}" />
		<mx:HSlider id="gridHOriginAlpha" minimum="0" maximum="1" value="{model.gridHOriginAlpha}" enabled="{model.gridHOriginVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="H Origin  Weight:" enabled="{model.gridHOriginVisible}" />
		<mx:HSlider id="gridHOriginWeight" minimum="0" maximum="15" snapInterval="1" value="{model.gridHOriginWeight}" enabled="{model.gridHOriginVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<!-- Vertical Origin -->
		<mx:CheckBox id="gridVOriginVisible" label="Vertical Origin" click="SettingsChanged()" selected="{model.gridVOriginVisible}" />
		<mx:HBox width="100%" >
			<mx:Label text="V Origin Color:" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="gridVOriginColor" showTextField="true" selectedColor="{model.gridVOriginColor}" change="SettingsChanged()" enabled="{model.gridVOriginVisible}" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="V Origin Transparency:" />
		<mx:HSlider id="gridVOriginAlpha" minimum="0" maximum="1" value="{model.gridVOriginAlpha}" enabled="{model.gridVOriginVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="V Origin  Weight:" />
		<mx:HSlider id="gridVOriginWeight" minimum="0" maximum="15" snapInterval="1" value="{model.gridVOriginWeight}" enabled="{model.gridVOriginVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
	<flexlib:WindowShade opened="false" label="Label Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:HBox width="100%" >
			<mx:Label text="H Axis Label Color:"/>
			<mx:ColorPicker id="hAxisLabelColor" showTextField="true" selectedColor="{model.hAxisLabelColor}" change="SettingsChanged()" />
		</mx:HBox>
		<mx:Label text="H Axis Label Size:"/>
		<mx:HSlider id="hAxisLabelSize" liveDragging="true" minimum="6" maximum="96" value="{model.hAxisLabelSize}" snapInterval="1" change="SettingsChanged()" />
		<mx:Label text="H Axis Label Gap:"/>
		<mx:HSlider id="hAxisLabelGap" liveDragging="true" minimum="0" maximum="96" value="{model.hAxisLabelGap}" snapInterval="1" change="SettingsChanged()" />
		<mx:HBox width="100%" >
			<mx:Label text="V Axis Label Color:"/>
			<mx:ColorPicker id="vAxisLabelColor" showTextField="true" selectedColor="{model.vAxisLabelColor}" change="SettingsChanged()" />
		</mx:HBox>
		<mx:Label text="V Axis Label Size:"/>
		<mx:HSlider id="vAxisLabelSize" liveDragging="true" minimum="6" maximum="96" value="{model.vAxisLabelSize}" snapInterval="1" change="SettingsChanged()" />
		<mx:Label text="V Axis Label Gap:"/>
		<mx:HSlider id="vAxisLabelGap" liveDragging="true" minimum="0" maximum="96" value="{model.vAxisLabelGap}" snapInterval="1" change="SettingsChanged()" />
	</flexlib:WindowShade>
	<flexlib:WindowShade opened="false" label="Axis Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:CheckBox id="hAxisVisible" label="Horizontal Axis" click="SettingsChanged()" selected="{model.hAxisVisible}" />
		<mx:HBox width="100%" >
			<mx:Label text="H Axis Color:"  enabled="{model.hAxisVisible}" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="hAxisColor" showTextField="true" selectedColor="{model.hAxisColor}" change="SettingsChanged()" enabled="{model.hAxisVisible}" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="H Axis Transparency:" enabled="{model.hAxisVisible}" />
		<mx:HSlider id="hAxisAlpha" minimum="0" maximum="1" value="{model.hAxisAlpha}" enabled="{model.hAxisVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="H Axis  Weight:" enabled="{model.hAxisVisible}" />
		<mx:HSlider id="hAxisWeight" minimum="0" maximum="15" snapInterval="1" value="{model.hAxisWeight}" enabled="{model.hAxisVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:CheckBox id="vAxisVisible" label="Vertical Axis" click="SettingsChanged()" selected="{model.vAxisVisible}" />
		<mx:HBox width="100%" >
			<mx:Label text="V Axis Color:"  enabled="{model.vAxisVisible}" />
			<mx:Spacer width="100%" />
			<mx:ColorPicker id="vAxisColor" showTextField="true" selectedColor="{model.vAxisColor}" change="SettingsChanged()" enabled="{model.vAxisVisible}" />
			<mx:Spacer width="30" />
		</mx:HBox>
		<mx:Label text="V Axis Transparency:" enabled="{model.vAxisVisible}" />
		<mx:HSlider id="vAxisAlpha" minimum="0" maximum="1" value="{model.vAxisAlpha}" enabled="{model.vAxisVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="V Axis  Weight:" enabled="{model.vAxisVisible}" />
		<mx:HSlider id="vAxisWeight" minimum="0" maximum="15" snapInterval="1" value="{model.vAxisWeight}" enabled="{model.vAxisVisible}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
	</flexlib:WindowShade>
</clg:ClipEditor>