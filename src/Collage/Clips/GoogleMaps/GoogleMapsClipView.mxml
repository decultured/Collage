<?xml version="1.0" encoding="utf-8"?>
<clg:ClipView xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:maps="com.google.maps.*"
	xmlns:clg="Collage.Clip.*"
	backgroundColor="0x000000"
	backgroundAlpha="0"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationComplete="Initialize()" >
	
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.events.PropertyChangeEvent;
		import mx.events.FlexEvent;
		import com.google.maps.Map;
	    import com.google.maps.LatLng;
	    import com.google.maps.LatLngBounds;
	    import com.google.maps.MapEvent;
	    import com.google.maps.MapType;
	    import com.google.maps.MapAction;
	    import com.google.maps.controls.*;
		import com.google.maps.overlays.*;
		import com.google.maps.styles.*;
		
		private function onMapReady(event:Event):void {
	        map.setCenter(new LatLng(39.099726,-94.578568), 8, MapType.NORMAL_MAP_TYPE);
			map.disableControlByKeyboard();
			map.disableScrollWheelZoom();
			SetMarkers();
			SetControls();
		}
		
		public function Initialize():void
		{
			onModelChange(null);
		}

		private function SetMarkers():void
		{
			if (!map.isLoaded())
				return;
			
			map.clearOverlays();
			var mapBounds:LatLngBounds = new LatLngBounds();

			var googleMapsModel:GoogleMapsClip = _Model as GoogleMapsClip;
			var mark:Array = googleMapsModel.markers;
			for (var key:String in googleMapsModel.markers) {
				var newLatLng:LatLng = new LatLng(mark[key]["latitude"], mark[key]["longitude"]);
				mapBounds.extend(newLatLng);
				var markerA:Marker = new Marker(newLatLng,
					new MarkerOptions({
						strokeStyle: new StrokeStyle({color: googleMapsModel.markerStrokeColor}),
						fillStyle: new FillStyle({color: googleMapsModel.markerColor, alpha: 0.8}),
						radius: googleMapsModel.markerRadius,
						hasShadow: googleMapsModel.markerShadows
					})
				);
				map.addOverlay(markerA);
			}
			map.setCenter(mapBounds.getCenter(), map.getBoundsZoomLevel(mapBounds));
		}

		private function SetControls():void
		{
			if (!map.isLoaded())
				return;

			map.clearControls();
			var googleMapsModel:GoogleMapsClip = _Model as GoogleMapsClip;
			if (googleMapsModel.positionControl && googleMapsModel.draggable)
				map.addControl(new PositionControl());
			if (googleMapsModel.zoomControl && googleMapsModel.zoomable)
				map.addControl(new ZoomControl());
			if (googleMapsModel.mapTypeControl)
				map.addControl(new MapTypeControl());
			if (googleMapsModel.scaleControl)
				map.addControl(new ScaleControl());
			if (googleMapsModel.overviewMapControl)
				map.addControl(new OverviewMapControl());
		}

		protected override function onModelChange(event:PropertyChangeEvent):void
		{
			
			if (event && (event.property == "x" || event.property == "y" || event.property == "width" || event.property == "height"))
				return;

			var googleMapsModel:GoogleMapsClip = _Model as GoogleMapsClip;
			
			if (event && (event.property == "positionControl" || event.property == "zoomControl" ||
							event.property == "mapTypeControl" || event.property == "scaleControl" ||
							event.property == "overviewMapControl" || event.property == "draggable" ||
							event.property == "zoomable")) {

				if (googleMapsModel.draggable) {
					map.enableDragging();
				} else {
					map.disableDragging();
				}

				if (googleMapsModel.zoomable) {
					map.setDoubleClickMode(MapAction.ACTION_PAN_ZOOM_IN);
				} else {
					map.setDoubleClickMode(MapAction.ACTION_NOTHING);
				}
				SetControls();
			}
			
			if (event && (event.property == "markers" || event.property == "markerShadows" || event.property == "markerColor" || event.property == "markerStrokeColor" || event.property == "markerRadius")) {
				SetMarkers();
			}
			
			super.onModelChange(event);
		}
	]]>
    </mx:Script>
	<maps:Map id="map" 
	    key="ABQIAAAAPRXqhGNlOd_sHtLdsKF4ExREepsFs8h9qLshUwr98X_ZtMTNKxTNWvF41U7M8n1RRDdhiOCQeAmoHg" 
		url="http://www.decultured.com/"
	    mapevent_mapready="onMapReady(event)"
	    width="100%" height="100%"/>
</clg:ClipView>