<?xml version="1.0" encoding="utf-8"?>
<clg:ClipEditor xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:clg="Collage.Clip.*"
	xmlns:flexlib="flexlib.containers.*"
	creationComplete="Initialize()" >
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import Collage.DataEngine.*;
		import mx.collections.ArrayCollection;

		// min, max, average/avg, sum, count, mode
		[Bindable]
		public var modifierSelections:ArrayCollection = new ArrayCollection(
		    [ {label:"Min", data:"min"},
		      {label:"Max", data:"max"},
		      {label:"Average", data:"avg"},
		      {label:"Sum", data:"sum"},
		      {label:"Count", data:"count"},
		      {label:"Mode", data:"mode"}
			]);
	
		[Bindable] public var dataSetSelections:Array = new Array();
		[Bindable] public var dataSetColumnSelections:Array = new Array();

		private function Initialize():void
		{
			DataEngineConnect();
		}
		
		private function SettingsChanged():void
		{
			if (_Model) {
				var dataLabelModel:DataLabelClip = _Model as DataLabelClip;
				dataLabelModel.color = textColorPicker.selectedColor;
				dataLabelModel.backgroundColor = backgroundColorPicker.selectedColor;
				dataLabelModel.backgroundAlpha = transparencySlider.value;
				dataLabelModel.fontSize = textFontSize.value;
			}
		}

		private function DataEngineConnect():void
		{
			DataEngine.events.addEventListener(DataEngine.COMPLETE, DatasLoaded);
			DatasLoaded(null);
		}
		
		private function DatasLoaded(event:Event):void
		{
			/*DataEngine.events.removeEventListener(DataEngine.COMPLETE, DatasLoaded);*/
			dataSetSelections = DataEngine.GetDataSetsComboBox(new Array("numeric", "datetime"), 2, 3);
			var dataLabelModel:DataLabelClip = _Model as DataLabelClip;
			for (var i:int = 0; i < dataSetSelections.length; i++)
				if (dataSetSelections[i]["data"] == dataLabelModel.dataSetID)
					dataSetSelector.selectedIndex = i;
			if (dataSetSelector.selectedItem)
				DataSetSelectorChanged(false);
		}

		private function ColumnSelectorChanged():void
		{
			var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (!dataset || !_Model)
				return;
			
			var dataLabelModel:DataLabelClip = _Model as DataLabelClip;
			var dataColumn:DataSetColumn = null;
			
			if (dataSetColumnSelector.selectedItem)
				dataColumn = dataset.GetColumnByID(dataSetColumnSelector.selectedItem.data);
			if (modifierSelector.selectedItem)
				dataLabelModel.dataSetColumnModifier = modifierSelector.selectedItem.data;

			if (dataColumn) {
				dataLabelModel.dataSetColumn = dataColumn.label;
			}

			dataLabelModel.RunQuery();
		}
		
		private function ModifierSelectorChanged():void
		{
			if (!_Model)
				return;
			
			var dataLabelModel:DataLabelClip = _Model as DataLabelClip;
			if (modifierSelector.selectedItem)
				dataLabelModel.dataSetColumnModifier = modifierSelector.selectedItem.data;
			dataLabelModel.RunQuery();
		}
		
		private function DataSetSelectorChanged(clearSelections:Boolean = true):void
		{
			if (!_Model)
				return;
				
			var dataLabelModel:DataLabelClip = _Model as DataLabelClip;

			if (clearSelections) {
				dataLabelModel.dataSetColumn = null;
				dataLabelModel.ResetData();
			}

			var dataset:DataSet = DataEngine.GetDataSetByID(dataSetSelector.selectedItem.data);

			if (dataset) {
				dataLabelModel.dataSetID = dataSetSelector.selectedItem.data;
				dataSetColumnSelections = dataset.GetColumnsComboBox();
				for (var i:int = 0; i < dataSetColumnSelections.length; i++) {
					if (dataSetColumnSelections[i]["label"] == dataLabelModel.dataSetColumn)
						dataSetColumnSelector.selectedIndex = i;
				}
				for (i = 0; i < modifierSelections.length; i++) {
					if (modifierSelections[i]["data"] == dataLabelModel.dataSetColumnModifier)
						modifierSelector.selectedIndex = i;
				}
				dataSetColumnSelector.enabled = true;
				modifierSelector.enabled = true;
			} else {
				dataLabelModel.dataSetID = null;
				dataSetColumnSelector.enabled = false;
				modifierSelector.enabled = false;
//				dataLabelModel.ResetData();
			}
		}

	]]>
    </mx:Script>
	<flexlib:WindowShade label="Data Connection" styleName="linkButtonWindowShade" width="100%">
		<mx:Label text="Data Set:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="dataSetSelector" dataProvider="{dataSetSelections}" width="230" change="DataSetSelectorChanged()" prompt="Please select a dataset..."/>
		<mx:Label text="Data Column:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="dataSetColumnSelector" dataProvider="{dataSetColumnSelections}" enabled="false" width="230" change="ColumnSelectorChanged()" prompt="Please select a column..."/>
		<mx:Label text="Modifier:" color="#000000" fontWeight="bold" />
		<mx:ComboBox id="modifierSelector" dataProvider="{modifierSelections}" enabled="false" width="230" change="ModifierSelectorChanged()" prompt="Please select a modifier..."/>
	</flexlib:WindowShade>
	<flexlib:WindowShade label="General Styles" styleName="linkButtonWindowShade" width="100%">
		<mx:HBox width="100%" >
			<mx:Label text="Text Color:" color="#000000" fontWeight="bold" />
			<mx:ColorPicker id="textColorPicker" showTextField="true" selectedColor="{model.color}" change="SettingsChanged()" />
		</mx:HBox>
		<mx:HBox width="100%" >
			<mx:Label text="Background Color:" color="#000000" fontWeight="bold" />
			<mx:ColorPicker id="backgroundColorPicker" showTextField="true" selectedColor="{model.backgroundColor}" change="SettingsChanged()" />
		</mx:HBox>
		<mx:Label text="Background Transparency:" color="#000000" fontWeight="bold" />
		<mx:HSlider id="transparencySlider" minimum="0" maximum="1" value="{model.backgroundAlpha}"
            allowTrackClick="true" liveDragging="true" change="SettingsChanged()" />
		<mx:Label text="Font Size:" color="#000000" fontWeight="bold" />
		<mx:HSlider id="textFontSize" minimum="6" maximum="96" value="{model.fontSize}" snapInterval="1" change="SettingsChanged()" />
	</flexlib:WindowShade>
	
</clg:ClipEditor>